


-- Ejercicio 15
select top 697 with ties * from organizacion.gasto g 
order by importe DESC 
--Muestra el gasto mas costoso
select MAX(importe) 'El gasto mas costoso es'FROM consorcioDB.organizacion.gasto g;

--Ejercicio 16
SELECT top 697 with ties importe,COUNT(importe)as 'repeticiones'FROM consorcioDB.organizacion.gasto g
group by importe 
HAVING COUNT(importe)>1
order by importe DESC 
-- Para hacerlos con todos los registros solo borrar el top 697

--Ejercicio 17
SELECT importe ,CASE
	when importe < 10000  then (importe + ((importe)*0.15))
	when (importe >= 10000 and importe < 20000) then (importe + ((importe)*0.10))
	else (importe + ((importe)*0.05))
	end as 'con incremento'	
FROM consorcioDB.organizacion.gasto g 	
order by importe DESC 

-- Ejercicio 18
select COUNT(sexo) as 'Masculino' 
from organizacion.administrador where sexo = 'M' 

SELECT * from organizacion.administrador ;
SELECT sexo ,COUNT(sexo) from organizacion.administrador a
group by sexo 
--having  sexo in ('F','M') --COUNT(sexo) > 1 

-- Ejercicio 19
SELECT sum(importe) as 'sumatoria' ,
COUNT(idgasto) as 'Cantidad de Gastos',
AVG(importe) as 'promedio' 
from organizacion.gasto 

-- Ejercicio 20
select idtipogasto as 'tipo de Gasto', sum(importe) as 'Importe acumulado'
from organizacion.gasto g 
group by idtipogasto 
order by idtipogasto ASC 
--having idtipogasto in (1,2,3,4,5)

--b
select idtipogasto as 'tipo de Gasto', sum(importe) as 'Importe acumulado'
from organizacion.gasto g 
group by idtipogasto HAVING idtipogasto in (1,2,3,4,5) and sum(importe) > 20000000
order by idtipogasto ASC 
--having idtipogasto in (1,2,3,4,5)

---c
select top 2 with ties idtipogasto as 'tipo de Gasto', sum(importe) as 'Importe acumulado'
from organizacion.gasto g 
group by idtipogasto HAVING idtipogasto in (1,2,3,4,5) 
order by sum(importe) ASC 

-- Ejercicio 21
select idtipogasto as 'tipo de Gasto', max(importe) as 'gasto mayor '
from organizacion.gasto g 
group by idtipogasto 
order by idtipogasto ASC 

-- Ejercicio 22
select idtipogasto as 'tipo de Gasto', 
AVG(importe) as 'PromedioGasto 1 semestre '--,
from organizacion.gasto g 
where periodo BETWEEN 1 and 6
group by idtipogasto 
order by idtipogasto ASC 
--SELECT * from organizacion.gasto g where periodo between 1 and 6

-- Ejercicio 23
SELECT idzona as 'idzona',
count(idconsorcio) as 'cantidad de consorcio por zona'
from organizacion.consorcio c 
where idzona in (2,3,4)
group by idzona HAVING idzona  in (2,3,4) 

-- Ejercicio 24
select idprovincia as 'idprovincia',
idlocalidad as 'idlocalidad',
COUNT(idconsorcio) as 'cantidad de consorcios por localidad'
from organizacion.consorcio c 
group by idprovincia,idlocalidad 

-- Ejercicio 25
select estciv as 'Estado Civil',
(cast(datediff(dd,fechnac ,GETDATE()) / 365.25 as int)),
COUNT( idconserje) as 'Cantidad'
from organizacion.conserje c 

group by estciv ,(cast(datediff(dd,fechnac ,GETDATE()) / 365.25 as int))
order by estciv ASC 

-- Ejercicio 26
SELECT descripcion,SUM(importe) as 'Importe Acumulado' from organizacion.gasto as g
inner join organizacion.tipogasto as t 
on g.idtipogasto = t.idtipogasto 
GROUP by descripcion 

-- Ejercicio 27
select p.descripcion, l.descripcion , c.nombre from organizacion.consorcio as c 
-- Primer ensamble
inner join organizacion.localidad as l on 
c.idlocalidad = l.idlocalidad 
AND 
c.idprovincia = l.idprovincia 
-- Segundo ensamble
inner join organizacion.provincia as p on 
p.idprovincia = l.idprovincia 

-- Ejercicio 28
SELECT top 10 with ties importe from organizacion.gasto order by importe desc;
SELECT top 10 with ties c.nombre as 'Consorcio', p.descripcion as 'Provincia',
 g.importe as 'Total Gastos'
from organizacion.consorcio as c
inner join organizacion.gasto as g on c.idconsorcio = g.idconsorcio 
inner join organizacion.provincia as p on c.idprovincia = p.idprovincia 
order by g.importe DESC 
------------------------------------------------------------
SELECT top 10 with ties /*c.nombre as 'Consorcio',*/ p.descripcion as 'Provincia',
 g.importe as 'Total Gastos'
from organizacion.gasto as g
inner join organizacion.consorcio as c on g.idconsorcio = c.idconsorcio 
inner join organizacion.provincia as p on g.idprovincia = p.idprovincia 
GROUP by p.descripcion ,g.importe 
order by g.importe DESC 
----------------------------------------------------------------
SELECT top 10 with ties c.nombre as 'Nombre' , p.descripcion as 'Provincia ', sum(g.importe) as 'Total gasto' 
from organizacion.consorcio c
inner join organizacion.provincia as p on c.idprovincia = p.idprovincia 
inner join organizacion.gasto as g on c.idconsorcio = g.idconsorcio 
and 
c.idprovincia = g.idprovincia 
and
c.idlocalidad = g.idlocalidad 
group by p.descripcion , c.nombre
order by sum(g.importe) DESC 

-- Ejercicio 29
SELECT p.descripcion , l.descripcion , c.nombre 
from organizacion.consorcio as c
full outer join organizacion.localidad as l on 
c.idlocalidad = l.idlocalidad 
AND 
c.idprovincia = c.idprovincia 
full outer  join organizacion.provincia as p on 
p.idprovincia = l.idprovincia 
order by p.descripcion ASC 
---------------------------------------------------
--sin mostrar la localidad si no tiene consorcio asignado
select organizacion.provincia.descripcion as 'Provincia', organizacion.localidad.descripcion 'Localidad',
organizacion.consorcio.nombre 'Consorcio' from organizacion.provincia
left outer join organizacion.consorcio on organizacion.provincia.idprovincia = organizacion.consorcio.idprovincia
left outer join organizacion.localidad on organizacion.provincia.idprovincia=organizacion.localidad.idprovincia and
organizacion.localidad.idlocalidad =organizacion.consorcio.idlocalidad; 

-- Ejercicio 30
--para verificar
SELECT * from organizacion.consorcio c 
SELECT * from organizacion.conserje c2 order by apeynom asc;

SELECT c1.apeynom , c.nombre 
from organizacion.conserje as c1
full outer join organizacion.consorcio as c
on c1.idconserje = c.idconserje 
-- Con este filtro mostrara consorcios sin conserjes 
-- y tambien conserjes sin consorcio asignado (es la accion inversa)
--WHERE c1.apeynom IS NULL or c.nombre IS NULL
order by c1.apeynom asc 


